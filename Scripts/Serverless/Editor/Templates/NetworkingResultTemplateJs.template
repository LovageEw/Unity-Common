using System;
using System.Net;
using Databases.Transaction;
using UnityEngine;
#RequiredUsing#
#region Additional usings
##USINGS##
#endregion Additional usings

namespace Networks.NetworkingResults
{
    public class #ModelName#NetworkingResult : NetworkingResultBase
    {
        public override string MethodName => "#FunctionName#";
        private readonly #LambdaBody# lambdaBody;
        public Action<#Model#> OnResponseArrive { get; set; }
        
        public #ModelName#NetworkingResult(#LambdaBody# lambdaBody)
        {
            this.lambdaBody = lambdaBody;
        }

        public override object GetLambdaEventSource()
        {
            return new #ModelName#Payload(lambdaBody);
        }

        [Serializable]
        private class #ModelName#Payload
        {
            // ReSharper disable once NotAccessedField.Local
            [SerializeField] private string body;
        
            public #ModelName#Payload(#LambdaBody# lambdaBody)
            {
                body = JsonUtility.ToJson(lambdaBody);
            }
        }

        public override bool Deserialize(string json)
        {
            var response = JsonUtility.FromJson<ResponseHeader>(json);
            if (response.statusCode != (int) HttpStatusCode.OK) { return false; }
            
            var model = JsonUtility.FromJson<#Model#>(response.body);
            #region Additional post-Deserialize process
##Post-Deserialize##
            #endregion Additional post-Deserialize process
            
            OnResponseArrive.SafeAction(model);
            return true;
        }
        
        public override void OnFunctionError(ErrorResponse response)
        {
            #region Define OnFunctionError
##OnFunctionError##
            #endregion Define OnFunctionError
        }
        
        #region Class-specific Codes
##ORIGINAL##
        #endregion Class-specific Codes
    }
}